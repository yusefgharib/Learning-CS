type: edu
files:
- name: honest_calc.py
  visible: true
  text: |+
    msg_0 = "Enter an equation"
    msg_1 = "Do you even know what numbers are? Stay focused!"
    msg_2 = "Yes ... an interesting math operation. You've slept through all classes, haven't you?"
    num1, num2, operand = "", "", ""
    operand_list, equation_list = ["+", "-", "*", "/"], []


    def create_equation(x):
        global num1, num2, operand, equation_list
        for characters in x:
            if characters != " ":
                equation_list.append(characters)
        for i in range(0, len(equation_list)):
            if equation_list[i] in operand_list:
                break
            else:
                num1 += equation_list[i]
        for i in range(len(equation_list) - 1, 0, -1):
            if equation_list[i] in operand_list:
                break
            else:
                num2 += equation_list[i]
        for i in range(0, len(equation_list)):
            if equation_list[i] in operand_list:
                operand += equation_list[i]
        return num1, num2, operand


    def is_num():
        global num1, num2, equation, operand
        while num1.isalpha() or num2.isalpha():
            print(msg_1)
            equation = input(msg_0)
            equation_list.clear()
            num1, num2, operand = "", "", ""
            create_equation(equation)
        return True


    def is_op():
        global num1, num2, equation, operand
        while operand == "" or operand not in operand_list:
            print(msg_2)
            equation = input(msg_0)
            equation_list.clear()
            num1, num2, operand = "", "", ""
            create_equation(equation)
        return True


    equation = input(msg_0)
    create_equation(equation)
    is_num()
    is_op()

    while not is_num() or not is_op():
        equation = input(msg_0)
        create_equation(equation)
        is_num()
        is_op()

  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest import StageTest, CheckResult, WrongAnswer, dynamic_test, TestedProgram
    import builtins


    def raise_error(message):
        raise Exception("Do not use eval() function!")


    builtins.eval = raise_error


    msg = ["Enter an equation",
           "Do you even know what numbers are? Stay focused!",
           "Yes ... an interesting math operation. You've slept through all classes, haven't you?",
           "Yeah... division by zero. Smart move..."]

    data = [
                (("2 + 1.1", "3.1"), ),
                (("2 + m", "\n".join([msg[1], msg[0]])), ("3 + 3", "6.0")),
                (("2 + m", "\n".join([msg[1], msg[0]])), ("3 n 3", "\n".join([msg[2], msg[0]])),
                 ("m - 2", "\n".join([msg[1], msg[0]])), ("4 * 5", "20.0"),),
                (("2 + m", "\n".join([msg[1], msg[0]])), ("3 n 3", "\n".join([msg[2], msg[0]])),
                 ("4 / 0", "\n".join([msg[3], msg[0]])), ("4 * 5.2", "20.8"),),
                (("2.0 + 1", "3.0"), ),
                (("411 - 211", "200.0"), ),

           ]  # (input data, msg sentence])


    class HonestCalc(StageTest):
        @dynamic_test(data=data)
        def test(self, *items):
            pr = TestedProgram()
            output = pr.start()
            if msg[0] not in output:
                return CheckResult.wrong(f"Expected: ({msg[0]})\nFound:    ({output.strip()})")
            for item in items:
                output = pr.execute(item[0])
                if item[1] != output.strip():
                    return CheckResult.wrong(f"Expected: ({item[1]})\nFound:    ({output.strip()})")

            if not pr.is_finished():
                return CheckResult.wrong("Your program unnecessarily waiting for input.")

            return CheckResult.correct()


    if __name__ == '__main__':
        HonestCalc().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/208/stages/1040/implement#comment
status: Solved
record: 1
