type: edu
custom_name: More formulas!
files:
- name: readability/readability.py
  visible: true
  text: |+
    import sys, re, math
    file_name = sys.argv[2]
    with open(file_name) as f:
        text = f.read()
        f.close()
    sent = re.split(r"[.!?]\s", text)
    sent = [words for words in sent]
    num_words = sum([len(words.split()) for words in sent])
    char_count = 0
    for line in text:
        for char in line.strip(' '):
            char_count += 1
    avg_word_count = num_words / len(sent)
    score = (4.71 * (char_count/num_words)) + 0.5 * (num_words/len(sent)) - 21.43
    ages = {1: '5-6', 2: '6-7', 3: '7-9', 4: '9-10', 5: '10-11', 6: '11-12', 7: '12-13', 8: '13-14',
            9: '14-15', 10: '15-16', 11: '16-17', 12: '17-18', 13: '18-24', 14: '24+'}
    print(f'The text is:\n{text}\nWords: {num_words}\nSentences: {len(sent)}\n'
          f'Characters: {char_count}\nThe score is: {score}\n'
          f'This text should be understood by {ages[math.ceil(score)]} year olds.')



  learner_created: false
- name: tests.py
  visible: false
  text: |
    import re

    from typing import List, Any
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult


    class TestClue:

        def __init__(self, words, sentences, characters, syllables, polysyllables,
                     ari, fkri, cli, age):
            self.words = words
            self.sentences = sentences
            self.characters = characters
            self.syllables = syllables
            self.polysyllables = polysyllables
            self.ari = ari
            self.fkri = fkri
            self.cli = cli
            self.age = age


    class TestClue1:

        def __init__(self, words, sentences, characters, syllables, polysyllables,
                     fkri, age):
            self.words = words
            self.sentences = sentences
            self.characters = characters
            self.syllables = syllables
            self.polysyllables = polysyllables
            self.fkri = fkri
            self.age = age


    class TestClue2:

        def __init__(self, words, sentences, characters, syllables, polysyllables,
                     ari, cli, age):
            self.words = words
            self.sentences = sentences
            self.characters = characters
            self.syllables = syllables
            self.polysyllables = polysyllables
            self.ari = ari
            self.cli = cli
            self.age = age


    class TestTheFourth(StageTest):

        def generate(self) -> List[TestCase]:
            list_tests = [
                TestCase(attach=TestClue(108, 6, 580, 196, 20,
                                         13, 13, 14, 24.0),
                         args=["--infile", "in.txt"],
                         files={
                             "in.txt": "Readability is " +
                                       "the ease with which a reader can " +
                                       "understand a written text. In natural " +
                                       "language, the readability of text depends " +
                                       "on its content and its presentation. " +
                                       "Researchers have used various factors " +
                                       "to measure readability. Readability is " +
                                       "more than simply legibility, which is a " +
                                       "measure of how easily a reader can distinguish " +
                                       "individual letters or characters from each other. " +
                                       "Higher readability eases reading effort and speed " +
                                       "for any reader, but it is especially important for " +
                                       "those who do not have high reading comprehension. " +
                                       "In readers with poor reading comprehension, raising " +
                                       "the readability level of a text from mediocre to good " +
                                       "can make the difference between success and failure",
                         }, stdin='all'),

                TestCase(attach=TestClue(137, 14, 687, 210, 17, 8, 7, 11, 14.5),
                         args=["--infile", "in.txt"],
                         files={
                             "in.txt": "This is the front page of the Simple English "
                                       "Wikipedia. Wikipedias are places where people work "
                                       "together to write encyclopedias in different languages. "
                                       "We use Simple English words and grammar here. The Simple "
                                       "English Wikipedia is for everyone! That includes children "
                                       "and adults who are learning English. There are 142,262 "
                                       "articles on the Simple English Wikipedia. All of the pages "
                                       "are free to use. They have all been published under both "
                                       "the Creative Commons License "
                                       "and the GNU Free Documentation License. You can help here! "
                                       "You may change these pages and make new pages. Read the help "
                                       "pages and other good pages to learn how to write pages here. "
                                       "If you need help, you may ask questions at Simple talk. Use "
                                       "Basic English vocabulary and shorter sentences. This allows "
                                       "people to understand normally complex terms or phrases.",
                         }, stdin='all'),

                TestCase(attach=TestClue(180, 13, 982, 317, 34, 12, 11, 14, 19.6),
                         args=["--infile", "in.txt"],
                         files={
                             "in.txt": "Gothic architecture are building designs, " +
                                       "as first pioneered in Western Europe in the Middle Ages. " +
                                       "It began in France in the 12th century. The Gothic style " +
                                       "grew out of Romanesque architecture. It lasted until the " +
                                       "16th century. By that time the Renaissance style of " +
                                       "architecture had become popular. The important features " +
                                       "of Gothic architecture are the pointed arch, the ribbed " +
                                       "vault, the flying buttress, and stained glass windows " +
                                       "which are explained below. " +
                                       "Gothic architecture is best known as the style of many " +
                                       "of the great cathedrals, abbeys and churches of Europe. " +
                                       "It is also the architecture of many castles, palaces, " +
                                       "town halls, universities, and also some houses. " +
                                       "Many church buildings still remain from this period. " +
                                       "Even the smallest Gothic churches are often very beautiful, " +
                                       "while many of the larger churches and cathedrals are " +
                                       "thought to be priceless works of art. Many are listed " +
                                       "with the United Nations Educational, Scientific and " +
                                       "Cultural Organization (UNESCO) as World Heritage Sites. " +
                                       "In the 19th century, the Gothic style became popular " +
                                       "again, particularly for building churches and universities. " +
                                       "This style is called Gothic Revival architecture.",
                         }, stdin='all'),

                TestCase(attach=TestClue(81, 7, 384, 120, 11, 7, 7, 10, 14.0),
                         args=["--infile", "in.txt"],
                         files={
                             "in.txt": "A robot is a machine that can move and do certain tasks. Robots are controlled by "
                                       "a computer program or electronic circuitry. They may be directly controlled by "
                                       "humans. They may be designed to look like humans, in which case their behaviour "
                                       "may suggest intelligence or thought but they do not have feelings. Most robots do "
                                       "a specific job, and they do not always look like humans. They can come in many "
                                       "forms. Planet rovers are robots for exploring distant planets.",
                         }, stdin='all'),

                TestCase(attach=TestClue(56, 4, 301, 91, 11, 11, 10, 14, 19.0), # Test 5
                         args=["--infile", "in.txt"],
                         files={
                             "in.txt": "A compiler is a computer program that translates computer code written in one "
                                       "programming language into another programming language. The first language is "
                                       "called the source language, and the code is called source code. The second "
                                       "language is called the target and can usually be understood by computers. In that "
                                       "case, the instructions become machine code.",
                         }, stdin='all'),

                TestCase(attach=TestClue1(81, 7, 384, 120, 11, 7, 13.0),
                         args=["--infile", "in.txt"],
                         files={
                             "in.txt": "A robot is a machine that can move and do certain tasks. Robots are controlled by "
                                       "a computer program or electronic circuitry. They may be directly controlled by "
                                       "humans. They may be designed to look like humans, in which case their behaviour "
                                       "may suggest intelligence or thought but they do not have feelings. Most robots do "
                                       "a specific job, and they do not always look like humans. They can come in many "
                                       "forms. Planet rovers are robots for exploring distant planets.",
                         }, stdin='FK',
                         check_function=self.check_one),

                TestCase(attach=TestClue2(81, 7, 384, 120, 11, 7, 10, 14.5),
                         args=["--infile", "in.txt"],
                         files={
                             "in.txt": "A robot is a machine that can move and do certain tasks. Robots are controlled by "
                                       "a computer program or electronic circuitry. They may be directly controlled by "
                                       "humans. They may be designed to look like humans, in which case their behaviour "
                                       "may suggest intelligence or thought but they do not have feelings. Most robots do "
                                       "a specific job, and they do not always look like humans. They can come in many "
                                       "forms. Planet rovers are robots for exploring distant planets.",
                         }, stdin='ARI CL',
                         check_function=self.check_two),
            ]

            return list_tests

        def check(self, reply: str, attach) -> CheckResult:
            found_words = False
            found_sentences = False
            found_chars = False
            found_syllables = False
            found_polysyllables = False

            found_ari = False
            found_fkt = False
            found_cli = False
            found_age = False

            for stroka in reply.lower().split('\n'):
                if "words:" in stroka:
                    found_words = True
                    try:
                        user_words = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse words count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_words - attach.words) > 5:
                        return CheckResult.wrong(f"Wrong number of words. "
                                                 f"Should be {attach.words} , but found {user_words}")

                if "sentences:" in stroka:
                    found_sentences = True
                    try:
                        user_sentences = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse sentences count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_sentences - attach.sentences) > 1:
                        return CheckResult.wrong(f"Wrong number of sentences. "
                                                 f"Should be {attach.sentences}, but found {user_sentences}")

                if "characters:" in stroka:
                    found_chars = True
                    try:
                        user_characters = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse characters count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_characters - attach.characters) > 10:
                        return CheckResult.wrong(f"Wrong number of characters. "
                                                 f"Should be {attach.characters}, but found {user_characters}")

                if "polysyllables:" in stroka:
                    found_polysyllables = True
                    try:
                        user_polysyllables = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse polysyllables count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_polysyllables - attach.polysyllables) > 5:
                        return CheckResult.wrong(f"Wrong number of polysyllables. "
                                                 f"Should be {attach.polysyllables}, but found {user_polysyllables}")

                if "syllables:" in stroka and "poly" not in stroka:
                    found_syllables = True
                    try:
                        user_syllables = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse syllables count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_syllables - attach.syllables) > 20:
                        return CheckResult.wrong(f"Wrong number of syllables. "
                                                 f"Should be {attach.syllables}, but found {user_syllables}")

                if "enter the score" not in reply.lower():
                    return CheckResult.wrong("The program should offer a user to choose the  metrics")

                if "automated readability index" in stroka:
                    found_ari = True
                    rounded = int(attach.ari)
                    actual = str(rounded)
                    before = str(rounded - 1)
                    after = str(rounded + 1)
                    if not (actual in stroka or before in stroka or after in stroka):
                        return CheckResult.wrong(f"Wrong Automated Readability Index score. Should be around {attach.ari}),"
                                                 f" your output: \n {stroka}")
                    if "year" not in stroka or "old" not in stroka:
                        return CheckResult.wrong("No age in Automated Readability Index")

                if stroka.startswith("flesch–kincaid"):
                    found_fkt = True
                    rounded = int(attach.fkri)
                    actual = str(rounded)
                    before = str(rounded - 1)
                    after = str(rounded + 1)
                    if not (actual in stroka or before in stroka or after in stroka):
                        return CheckResult.wrong(f"Wrong Flesch–Kincaid score. Should be around {attach.fkri}),"
                                                 f" your output: \n {stroka}")
                    if "year" not in stroka or "old" not in stroka:
                        return CheckResult.wrong("No age in Flesch–Kincaid")

                if stroka.startswith("coleman–liau"):
                    found_cli = True
                    rounded = int(attach.cli)
                    actual = str(rounded)
                    before = str(rounded - 1)
                    after = str(rounded + 1)
                    if not (actual in stroka or before in stroka or after in stroka):
                        return CheckResult.wrong(f"Wrong Coleman–Liau score. Should be around {attach.cli}),"
                                                 f" your output: \n {stroka}")
                    if "year" not in stroka or "old" not in stroka:
                        return CheckResult.wrong("No age in Coleman–Liau")

                if "year" in stroka and "old" in stroka and 'understood' in stroka:
                    found_age = True
                    try:
                        user_age = float(re.split('[-— ]', stroka)[-3])
                    except ValueError:
                        return CheckResult.wrong("Can't parse the age!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_age - attach.age) > 1.5:
                        return CheckResult.wrong("Wrong age")

            if not found_words:
                return CheckResult.wrong("There is no words amount")
            if not found_sentences:
                return CheckResult.wrong("There is no sentences amount")
            if not found_chars:
                return CheckResult.wrong("There is no characters amount")
            if not found_polysyllables:
                return CheckResult.wrong("There is no polysyllables in output")
            if not found_syllables:
                return CheckResult.wrong("There is no syllables in output")
            if not found_ari:
                return CheckResult.wrong("There is no Automated Readability Index in output")
            if not found_fkt:
                return CheckResult.wrong("There is no Flesch–Kincaid readability tests in output")
            if not found_cli:
                return CheckResult.wrong("There is no Coleman–Liau index in output")
            if not found_age:
                return CheckResult.wrong("There is no age in output")

            return CheckResult.correct()

        def check_one(self, reply: str, attach) -> CheckResult:
            found_words = False
            found_sentences = False
            found_chars = False
            found_syllables = False
            found_polysyllables = False

            found_fkt = False
            found_age = False

            for stroka in reply.lower().split('\n'):
                stroka = stroka.lower()
                if "words:" in stroka:
                    found_words = True
                    try:
                        user_words = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse words count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_words - attach.words) > 5:
                        return CheckResult.wrong(f"Wrong number of words. "
                                                 f"Should be {attach.words} , but found {user_words}")

                if "sentences:" in stroka:
                    found_sentences = True
                    try:
                        user_sentences = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse sentences count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_sentences - attach.sentences) > 1:
                        return CheckResult.wrong(f"Wrong number of sentences. "
                                                 f"Should be {attach.sentences}, but found {user_sentences}")

                if "characters:" in stroka:
                    found_chars = True
                    try:
                        user_characters = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse characters count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_characters - attach.characters) > 10:
                        return CheckResult.wrong(f"Wrong number of characters. "
                                                 f"Should be {attach.characters}, but found {user_characters}")

                if "polysyllables:" in stroka:
                    found_polysyllables = True
                    try:
                        user_polysyllables = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse polysyllables count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_polysyllables - attach.polysyllables) > 5:
                        return CheckResult.wrong(f"Wrong number of polysyllables. "
                                                 f"Should be {attach.polysyllables}, but found {user_polysyllables}")

                if "syllables:" in stroka and "poly" not in stroka:
                    found_syllables = True
                    try:
                        user_syllables = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse syllables count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_syllables - attach.syllables) > 20:
                        return CheckResult.wrong(f"Wrong number of syllables. "
                                                 f"Should be {attach.syllables}, but found {user_syllables}")

                if "enter the score" not in reply.lower():
                    return CheckResult.wrong("The program should offer a user to choose the  metrics")

                if "flesch–kincaid" in stroka:
                    found_fkt = True
                    rounded = int(attach.fkri)
                    actual = str(rounded)
                    before = str(rounded - 1)
                    after = str(rounded + 1)
                    if not (actual in stroka or before in stroka or after in stroka):
                        return CheckResult.wrong(f"Wrong Flesch–Kincaid score. Should be around {attach.fkri}),"
                                                 f" your output: \n {stroka}")
                    if "year" not in stroka or "old" not in stroka:
                        return CheckResult.wrong("No age in Flesch–Kincaid")

                if "year" in stroka and "old" in stroka and 'understood' in stroka:
                    found_age = True
                    try:
                        user_age = float(re.split('[-— ]', stroka)[-3])
                    except ValueError:
                        return CheckResult.wrong("Can't parse the age!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_age - attach.age) > 1.5:
                        return CheckResult.wrong("Wrong age")

            if not found_words:
                return CheckResult.wrong("There is no words amount")
            if not found_sentences:
                return CheckResult.wrong("There is no sentences amount")
            if not found_chars:
                return CheckResult.wrong("There is no characters amount")
            if not found_polysyllables:
                return CheckResult.wrong("There is no polysyllables in output")
            if not found_syllables:
                return CheckResult.wrong("There is no syllables in output")
            if not found_fkt:
                return CheckResult.wrong("There is no Flesch–Kincaid readability tests in output")
            if not found_age:
                return CheckResult.wrong("There is no age in output")

            return CheckResult.correct()

        def check_two(self, reply: str, attach) -> CheckResult:
            found_words = False
            found_sentences = False
            found_chars = False
            found_syllables = False
            found_polysyllables = False

            found_ari = False
            found_cli = False
            found_age = False

            for stroka in reply.lower().split('\n'):
                stroka = stroka.lower()
                if "words:" in stroka:
                    found_words = True
                    try:
                        user_words = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse words count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_words - attach.words) > 5:
                        return CheckResult.wrong(f"Wrong number of words. "
                                                 f"Should be {attach.words} , but found {user_words}")

                if "sentences:" in stroka:
                    found_sentences = True
                    try:
                        user_sentences = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse sentences count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_sentences - attach.sentences) > 1:
                        return CheckResult.wrong(f"Wrong number of sentences. "
                                                 f"Should be {attach.sentences}, but found {user_sentences}")

                if "characters:" in stroka:
                    found_chars = True
                    try:
                        user_characters = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse characters count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_characters - attach.characters) > 10:
                        return CheckResult.wrong(f"Wrong number of characters. "
                                                 f"Should be {attach.characters}, but found {user_characters}")

                if "polysyllables:" in stroka:
                    found_polysyllables = True
                    try:
                        user_polysyllables = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse polysyllables count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_polysyllables - attach.polysyllables) > 5:
                        return CheckResult.wrong(f"Wrong number of polysyllables. "
                                                 f"Should be {attach.polysyllables}, but found {user_polysyllables}")

                if "syllables:" in stroka and "poly" not in stroka:
                    found_syllables = True
                    try:
                        user_syllables = int(stroka.split(':')[-1])
                    except ValueError:
                        return CheckResult.wrong("Can't parse syllables count!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_syllables - attach.syllables) > 20:
                        return CheckResult.wrong(f"Wrong number of syllables. "
                                                 f"Should be {attach.syllables}, but found {user_syllables}")

                if "enter the score" not in reply.lower():
                    return CheckResult.wrong("The program should offer a user to choose the  metrics")

                if "automated readability index" in stroka:
                    found_ari = True
                    rounded = int(attach.ari)
                    actual = str(rounded)
                    before = str(rounded - 1)
                    after = str(rounded + 1)
                    if not (actual in stroka or before in stroka or after in stroka):
                        return CheckResult.wrong(f"Wrong Automated Readability Index score. Should be around {attach.ari}),"
                                                 f" your output: \n {stroka}")
                    if "year" not in stroka or "old" not in stroka:
                        return CheckResult.wrong("No age in Automated Readability Index")

                if "coleman–liau" in stroka:
                    found_cli = True
                    rounded = int(attach.cli)
                    actual = str(rounded)
                    before = str(rounded - 1)
                    after = str(rounded + 1)
                    if not (actual in stroka or before in stroka or after in stroka):
                        return CheckResult.wrong(f"Wrong Coleman–Liau score. Should be around {attach.cli}),"
                                                 f" your output: \n {stroka}")
                    if "year" not in stroka or "old" not in stroka:
                        return CheckResult.wrong("No age in Coleman–Liau")

                if "year" in stroka and "old" in stroka and 'understood' in stroka:
                    found_age = True
                    try:
                        user_age = float(re.split('[-— ]', stroka)[-3])
                    except ValueError:
                        return CheckResult.wrong("Can't parse the age!"
                                                 "\nYour output format should be like in examples.")
                    if abs(user_age - attach.age) > 1.5:
                        return CheckResult.wrong("Wrong age")

            if not found_words:
                return CheckResult.wrong("There is no words amount")
            if not found_sentences:
                return CheckResult.wrong("There is no sentences amount")
            if not found_chars:
                return CheckResult.wrong("There is no characters amount")
            if not found_polysyllables:
                return CheckResult.wrong("There is no polysyllables in output")
            if not found_syllables:
                return CheckResult.wrong("There is no syllables in output")
            if not found_ari:
                return CheckResult.wrong("There is no Automated Readability Index in output")
            if not found_cli:
                return CheckResult.wrong("There is no Coleman–Liau index in output")
            if not found_age:
                return CheckResult.wrong("There is no age in output")

            return CheckResult.correct()


    if __name__ == '__main__':
        TestTheFourth('readability.readability').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/155/stages/811/implement#comment
status: Solved
record: 3
