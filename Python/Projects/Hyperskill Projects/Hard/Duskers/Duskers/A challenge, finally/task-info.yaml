type: edu
files:
- name: duskers/duskers.py
  visible: true
  text: "import random\nimport sys\n\nrandom.seed(sys.argv[1])\nclass Duskers:\n \
    \   def __init__(self):\n        self.titanium = 0\n        self.locations = {}\n\
    \        self.name, self.main_choice = '', ''\n        self.valid_choices = [\"\
    play\", \"high\", \"help\", \"exit\", \"back\"]\n        self.title = (\"\\n\"\
    \n                      \"║    ██████╗ ██╗   ██╗███████╗██╗  ██╗███████╗██████\
    ╗ ███████╗   ║\\n\"\n                      \"║    ██╔══██╗██║   ██║██╔════╝██║\
    \ ██╔╝██╔════╝██╔══██╗██╔════╝   ║\\n\"\n                      \"║    ██║  ██║\
    ██║   ██║███████╗█████╔╝ █████╗  ██████╔╝███████╗   ║\\n\"\n                 \
    \     \"║    ██║  ██║██║   ██║╚════██║██╔═██╗ ██╔══╝  ██╔══██╗╚════██║   ║\\n\"\
    \n                      \"║    ██████╔╝╚██████╔╝███████║██║  ██╗███████╗██║  █\
    █║███████║   ║\\n\"\n                      \"║    ╚═════╝  ╚═════╝ ╚══════╝╚═╝\
    \  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝   ║\\n\")\n        locations = sys.argv[4].split('/')\n\
    \        for location in locations:\n            location.replace(',', ' ')\n\
    \            self.locations[location] = random.randint(10, 100)\n\n    def title_menu(self):\n\
    \        print(self.title)\n\n    def menu(self):\n        self.title_menu()\n\
    \        self.process_choice()\n\n    @staticmethod\n    def exit_game():\n  \
    \      print(\"Coming SOON! Thanks for playing!\")\n        exit()\n\n    def\
    \ process_choice(self):\n        main_choice = input(\"[Play]\\n[High] Scores\\\
    n[Help]\\n[Exit]\\n\").lower()\n        while main_choice not in self.valid_choices:\n\
    \            print(\"Invalid input\")\n            main_choice = input(\"\\t\\\
    t\\t\\t[Play]\\t\\t\\t[High] Scores\\t\\t\\t\\t\\n\\t\\t\\t\\t[Help]\\t\\t\\t[Exit]\\\
    n\").lower()\n        if main_choice == 'exit':\n            self.exit_game()\n\
    \        elif main_choice == 'play':\n            self.name = input(\"Enter your\
    \ name:\")\n            print(\"\\nGreetings, commander {}\".format(self.name))\n\
    \            print(\"Are you ready to begin?\\n[Yes] [No] Return to Main[Menu]\\\
    n\")\n            ready = input(\"Your command: \").lower()\n            while\
    \ ready not in ['yes', 'menu']:\n                print(\"Invalid input\")\n  \
    \              print(\"Are you ready to begin?\\n[Yes] [No] Return to Main[Menu]\\\
    n\")\n                ready = input(\"Your command: \\n\")\n            if ready\
    \ == 'menu':\n                self.menu()\n            elif ready == 'yes':\n\
    \                self.play()\n        elif main_choice == 'help':\n          \
    \  self.help()\n        elif main_choice == 'high':\n            self.scores()\n\
    \n    def play(self):\n        print(f\"\"\"║═════════════════════════════════\
    ═══════════════════════════════════════════════║\n\n         ▄▄▄▄▄           \
    \         ▄▄▄▄▄                    ▄▄▄▄▄           \n        █ v v █         \
    \         █ v v █                  █ v v █          \n         ▀▀█▀▀         \
    \           ▀▀█▀▀                    ▀▀█▀▀           \n        █▀▀█▀▀█       \
    \           █▀▀█▀▀█                  █▀▀█▀▀█          \n          █ █        \
    \              █ █                      █ █            \n         █   █      \
    \              █   █                    █   █           \n  \n  Titanium: {self.titanium}\n\
    ║═════════════════════════════════════════════════════════════════════════════\
    ═══║\n║                  [Ex]plore                          [Up]grade        \
    \          ║\n║                  [Save]                             [M]enu   \
    \                  ║\n║═══════════════════════════════════════════════════════\
    ═════════════════════════║\"\"\")\n        choice = input(\"Your command:\").lower()\n\
    \        if choice == 'save':\n            print(\"Coming SOON! Thanks for playing!\"\
    )\n            exit()\n        elif choice == 'm':\n            self.pause()\n\
    \        elif choice == 'up':\n            print(\"Coming SOON! Thanks for playing!\"\
    )\n            exit()\n        elif choice == 'ex':\n            print(\"Coming\
    \ SOON! Thanks for playing!\")\n            exit()\n\n    def pause(self):\n \
    \       print(\"\"\"                \n                        ║═══════════════\
    ═════════║\n                        ║          MENU          ║ \n            \
    \            ║════════════════════════║\n                        ║     [Back]\
    \ to game     ║\n                        ║  Return to [Main] Menu ║\n        \
    \                ║     [Save] and exit    ║\n                        ║       [Exit]\
    \ game      ║\n                        ║════════════════════════║\"\"\")\n   \
    \     choice = input(\"\\nYour command:\").lower()\n        if choice == 'back':\n\
    \            self.play()\n        elif choice == 'main':\n            self.menu()\n\
    \        elif choice == 'save':\n            print(\"Coming SOON! Thanks for playing!\"\
    )\n            exit()\n        elif choice == 'exit':\n            print(\"Coming\
    \ SOON! Thanks for playing!\")\n            exit()\n\n    def scores(self):\n\
    \        print(\"No scores to display.\")\n        choice = input(\"[Back]\").lower()\n\
    \        while choice != 'back':\n            print(\"Invalid input\")\n     \
    \       choice = input(\"[Back]\").lower()\n        self.menu()\n\n    @staticmethod\n\
    \    def help():\n        print(\"Coming SOON! Thanks for playing!\")\n      \
    \  exit()\n\n\nd = Duskers()\nd.menu()\n"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest import CheckResult, StageTest, TestedProgram, dynamic_test
    from typing import List, Tuple
    from utils.global_tests import DEFAULT_CLI_ARGS, check_graphical_robots, get_hub_lines, GlobalDuskersTest
    from utils.from_stage4_tests import (FromStage4DuskersTest, file_cleanup)
    import utils.from_stage5_tests as stage5_tests
    from utils.stage6_test_unit import PLACE_NAMES, Game, find_seed, play_until_game_over
    from enum import Enum

    MODULE_NAME = 'duskers.duskers'
    STAGE_NO = 6

    DEFAULT_ROBOT_COUNT = 3
    MAX_NUMBER_OF_HIGH_SCORES = 10

    ILLEGAL_SALE_MSG = "The sale of upgrades should not be possible if player has" \
                       " insufficient titanium. Detected illegal sale of " \
                       "'{}'."


    class Upgrade:
        def __init__(self, command: str, price: int):
            self.command = command
            self.price = price


    class GameUpgrades(Enum):
        TITANIUM = Upgrade("1", 250)
        ENCOUNTER = Upgrade("2", 500)
        ROBOT = Upgrade("3", 1000)


    def gen_input(choices: List[int], n: int = None):
        if n is None:
            n = len(choices)

        generated_input = []

        for choice in choices[:n]:
            generated_input.append("ex")
            generated_input += ["s" for _ in range(9)]
            generated_input += str(choice)

        return generated_input


    class DuskersTest(StageTest):
        @staticmethod
        def get_cli_args(seed: str):
            place_args = "/".join(PLACE_NAMES)
            return [seed, "0", "0", place_args]

        @staticmethod
        def simulate_optimal_game(seed: str, game: Game, end: int, start: int = 0,
                                  pr: TestedProgram = None, name: str = "hyperskill") -> Tuple[TestedProgram, str]:
            if pr is None:
                pr = TestedProgram()
                pr.start(*DuskersTest.get_cli_args(seed))

                for command in ["new", name, "yes"]:
                    pr.execute(command)

            for command in gen_input([move.selection for move in game.moves[start:end]]):
                output = pr.execute(command)
            return pr, output

        @staticmethod
        def buy_upgrade(pr: TestedProgram, upgrade: Upgrade, explore_after: bool = True) -> str:
            for command in ["up", upgrade.command]:
                output = pr.execute(command)

            if explore_after:
                output = pr.execute("ex")
            return output

        @staticmethod
        def save_game(pr: TestedProgram, save_slot: str) -> None:
            for command in ["back", "save", save_slot, "m", "exit"]:
                pr.execute(command)

        @staticmethod
        def restart_game(seed: int, save_slot: str) -> Tuple[TestedProgram, str]:
            pr = TestedProgram()
            pr.start(*DuskersTest.get_cli_args(seed))
            pr.execute("load")
            output = pr.execute(save_slot)
            return pr, output

        @dynamic_test
        def test_illegal_upgrade_sale(self):
            pr = TestedProgram()
            pr.start(*DEFAULT_CLI_ARGS)

            for command in ["new", "hyperskill", "yes", "up", "2", "back", "ex"]:
                output = pr.execute(command)

            if "%" in output:
                return CheckResult.wrong(
                    ILLEGAL_SALE_MSG.format("Enemy Encounter Scan")
                )

            for command in ["up", "3"]:
                pr.execute(command)

            game_menu = pr.execute("back")

            if not check_graphical_robots(game_menu.splitlines()[1:8], 3):
                return CheckResult.wrong(
                    ILLEGAL_SALE_MSG.format("New Robot")
                )

            return CheckResult.correct()

        @dynamic_test(data=["0", "10", "101"])
        def test_losing_robot_hub_update(self, seed):
            game = play_until_game_over(seed, DEFAULT_ROBOT_COUNT)
            current_robot_count = DEFAULT_ROBOT_COUNT

            pr = None
            move_indices = [-1] + game.moves_where_robot_lost
            i = 0
            while True:  # do ...
                pr, output = self.simulate_optimal_game(
                    seed, game, move_indices[i + 1] + 1, move_indices[i] + 1, pr)

                current_robot_count -= 1

                hub_lines = get_hub_lines(output)

                if len(hub_lines) < 7:
                    return CheckResult.wrong(
                        "Hub not displayed properly after returning from exploration "
                        "where a robot was lost, look at the examples for help.\n"
                        "Make sure the first line of the hub begins with a '║' character"
                    )

                if not check_graphical_robots(hub_lines, current_robot_count):
                    return CheckResult.wrong(
                        "Expected one robot to disappear from the hub after an "
                        "enemy encounter, but it did not.\n"
                        "Please check your enemy encounter algorithm and make sure "
                        "your hub is updated accordingly."
                    )

                i += 1
                # ... while
                if i >= len(move_indices) - 2:
                    break

            return CheckResult.correct()

        @dynamic_test(data=[0, 10, 1090])
        @file_cleanup
        def test_sale_and_persistence_of_titanium_upgrade(self, initial_seed):
            seed, game = find_seed(
                GameUpgrades.TITANIUM.value.price, DEFAULT_ROBOT_COUNT, initial_seed)
            # Play additional round to later compare titanium count displayed
            game.play_optimal_round()

            pr, _ = self.simulate_optimal_game(seed, game, -1)
            output = self.buy_upgrade(pr, GameUpgrades.TITANIUM.value)

            if str(game.get_titanium_for_move_and_choice(-1, 0)) not in output:
                return CheckResult.wrong(
                    "No titanium upgrade detected. This could also be due to your"
                    "random generation algorithm not implemented as expected.\n"
                    "Please double check the exact"
                    "steps in the stage description and look at the examples."
                )

            self.save_game(pr, "1")
            pr, _ = self.restart_game(seed, "1")
            output = pr.execute("ex")

            if str(game.get_titanium_for_move_and_choice(0, 0)) not in output:
                return CheckResult.wrong(
                    "No titanium upgrade detected after saving and reloading the game."
                )

            return CheckResult.correct()

        @dynamic_test(data=[0, 10, 1090])
        @file_cleanup
        def test_sale_and_persistence_of_encounter_upgrade(self, initial_seed):
            seed, game = find_seed(
                GameUpgrades.ENCOUNTER.value.price, DEFAULT_ROBOT_COUNT, initial_seed)
            # Play additional round to later compare encounter rate displayed
            game.play_optimal_round()

            pr, _ = self.simulate_optimal_game(seed, game, -1)
            output = self.buy_upgrade(pr, GameUpgrades.ENCOUNTER.value)

            if str(game.get_encounter_percentage_for_move_and_choice(-1, 0)) not in output:
                return CheckResult.wrong(
                    "No enemy encounter scan upgrade detected after purchasing it."
                    "This could also be due to your enemy encounter rate not being "
                    "implemented as expected.\n"
                    "Please double check the exact steps in the stage description "
                    "and look at the examples."
                )

            self.save_game(pr, "1")
            pr, _ = self.restart_game(seed, "1")
            output = pr.execute("ex")

            if str(game.get_encounter_percentage_for_move_and_choice(0, 0)) not in output:
                return CheckResult.wrong(
                    "No enemy encounter scan upgrade detected after saving and reloading the game."
                )

            return CheckResult.correct()

        @dynamic_test(data=[1, 21, 2000])
        @file_cleanup
        def test_sale_and_persistence_of_robot_upgrade(self, initial_seed):
            seed, game = find_seed(
                GameUpgrades.ROBOT.value.price, DEFAULT_ROBOT_COUNT, initial_seed)

            pr, _ = self.simulate_optimal_game(seed, game, len(game.moves))
            output = self.buy_upgrade(
                pr, GameUpgrades.ROBOT.value, explore_after=False)

            hub_lines = get_hub_lines(output)

            if len(hub_lines) < 7:
                return CheckResult.wrong(
                    "Hub not displayed properly after purchasing 'New Robot' upgrade "
                    ", look at the examples for help.\n"
                    "Make sure the first line of the hub begins with a '║' character"
                )

            if not check_graphical_robots(hub_lines, game.robot_count + 1):
                return CheckResult.wrong(
                    "No new robot detected after purchasing the 'New Robot' upgrade.\n"
                    "The new robot should appear right next to the existing ones in the hub."
                )

            self.save_game(pr, "1")
            pr, output = self.restart_game(seed, "1")

            if not check_graphical_robots(get_hub_lines(output), game.robot_count + 1):
                return CheckResult.wrong(
                    "Purchased robot did not persist after saving and reloading the game.")

            return CheckResult.correct()

        @dynamic_test(data=["3", "31", "3000"])
        @file_cleanup
        def test_game_over(self, seed):
            game = play_until_game_over(seed, DEFAULT_ROBOT_COUNT)
            pr = TestedProgram()
            main_menu = pr.start(*self.get_cli_args(seed))

            for command in ["new", "hyperskill", "yes"]:
                pr.execute(command)

            _, output = self.simulate_optimal_game(
                seed, game, len(game.moves), pr=pr)

            if "game over" not in output.lower():
                return CheckResult.wrong(
                    "The string 'game over' not found when the player looses all robots."
                )

            if main_menu not in output:
                return CheckResult.wrong(
                    "Main menu not displayed after a game over.\n"
                    "Make sure to take the player to the main menu right after the game is over."
                )

            return CheckResult.correct()

        @dynamic_test(data=[[1, 7], [70, 10], [10000, 20]])
        @file_cleanup
        def test_high_scores(self, initial_seed, game_count):
            games: List[Game] = []

            for _ in range(game_count):
                seed = str(initial_seed)
                # arbitrary number appended to name
                name = "hyperskill" + str(initial_seed % 7)
                game = play_until_game_over(seed, DEFAULT_ROBOT_COUNT, name)
                games.append(game)

                self.simulate_optimal_game(seed, game, game.move_count, name=name)

                initial_seed += 1

            pr = TestedProgram()
            pr.start(*self.get_cli_args(seed))

            output_lines = pr.execute('high').splitlines()
            games.sort(key=lambda g: g.titanium, reverse=True)

            game_index = 0
            line_index = 0
            target = min(len(games), MAX_NUMBER_OF_HIGH_SCORES)

            while line_index < len(output_lines) and game_index < target:
                game = games[game_index]
                line = output_lines[line_index]

                if game.name in line and str(game.titanium) in line:
                    game_index += 1
                line_index += 1

            if game_index < target:
                return CheckResult.wrong(
                    "High scores not displayed properly. Please make sure that the "
                    "player's name and their score (titanium balance at time of game over) "
                    "is displayed on a single line.\n"
                    "Ensure that the scores are sorted from highest to lowest, and "
                    "that the 10 highest ones are displayed.\n"
                    "If less than 10 games were played, display all games that were "
                    "played till the game over screen.\n"
                    "Make sure the high scores persists when exiting and reopening the program."
                )

            return CheckResult.correct()


    if __name__ == '__main__':
        # run tests that are shared among more than 1 stage
        return_code = GlobalDuskersTest(STAGE_NO, MODULE_NAME).run_tests()[0]
        # run tests specific to this stage if global tests pass

        suites = [
            FromStage4DuskersTest(STAGE_NO, MODULE_NAME),
            stage5_tests.DuskersTest(STAGE_NO, MODULE_NAME),
            DuskersTest(MODULE_NAME)]
        current_suite = 0

        while return_code == 0 and current_suite < len(suites):
            return_code = suites[current_suite].run_tests()[0]
            current_suite += 1
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/11306#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 05 Sep 2022 09:02:23 UTC
record: 6
