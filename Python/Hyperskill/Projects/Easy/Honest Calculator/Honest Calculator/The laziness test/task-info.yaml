type: edu
files:
- name: honest_calc.py
  visible: true
  text: |
    result = M = 0
    by_zero = False
    while True:
        print("Enter an equation")
        num1, operator, num2 = input().split()
        try:
            num1 = M if num1 == 'M' else float(num1)
            num2 = M if num2 == 'M' else float(num2)
            if operator in '+-*/':
                if operator == '/' and int(num2) == 0:
                    print("Yeah... division by zero. Smart move...")
                    by_zero = True
                else:
                    if operator == '+':
                        result = float(num1) + float(num2)
                    elif operator == '-':
                        result = float(num1) - float(num2)
                    elif operator == '*':
                        result = float(num1) * float(num2)
                    elif operator == '/':
                        result = float(num1) / float(num2)
                    by_zero = False
                    print(result)
            else:
                print("Yes ... an interesting math operation. You've slept through all classes, haven't you?")
        except ValueError:
            print("Do you even know what numbers are? Stay focused!")

        if not by_zero:
            store = input("Do you want to store the result? (y / n):")
            while store not in 'yn':
                store = input("Do you want to store the result? (y / n):")
            if store == 'y':
                M = result
            elif store == 'n':
                M = 0
            again = input("Do you want to continue calculations? (y / n):")
            while again not in 'yn':
                again = input("Do you want to continue calculations? (y / n):")
            if again == 'y':
                result = 0
            elif again == 'n':
                break
        else:
            continue
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest import StageTest, CheckResult, WrongAnswer, dynamic_test, TestedProgram

    msg = ["Enter an equation",
           "Do you even know what numbers are? Stay focused!",
           "Yes ... an interesting math operation. You've slept through all classes, haven't you?",
           "Yeah... division by zero. Smart move...",
           "Do you want to store the result? (y / n):",
           "Do you want to continue calculations? (y / n):",
           " ... lazy",
           " ... very lazy",
           " ... very, very lazy",
           "You are"]


    def add_enter(txt):
        return "\n".join([txt, msg[0]])


    def add_memory(txt):
        return "\n".join([txt, msg[4]])


    data = [(("4 * 5.5", add_memory("22.0")), ("y", msg[5]), ("n", "")),
            (("11 * 11.1", add_memory("122.1")), ("y", msg[5]), ("n", "")),
            (("1 * 5", "\n".join([msg[9] + msg[6] + msg[7], add_memory("5.0")])), ("y", msg[5]), ("y", msg[0]),
             ("0 + M", "\n".join([msg[9] + msg[6] + msg[8], add_memory("5.0")])), ("y", msg[5]), ("n", "")),
            (("2 / M", "\n".join([msg[9] + msg[6], add_enter(msg[3])])), ("1 * M", "\n".join([msg[9] + "".join(msg[6:9]), add_memory("0.0")])), ("n", msg[5]), ("y", msg[0]),
             ("899 * 0", "\n".join([msg[9] + msg[8], add_memory("0.0")])), ("n", msg[5]), ("n", "")),
           ]  # (input data, msg sentence])


    class HonestCalc(StageTest):
        @dynamic_test(data=data)
        def test(self, *items):
            pr = TestedProgram()
            output = pr.start()
            if msg[0] not in output:
                return CheckResult.wrong(f"Expected: ({msg[0]});\nFound:    ({output.strip()})")
            for item in items:
                output = pr.execute(item[0])
                if item[1] != output.strip():
                    return CheckResult.wrong(f"Expected:\n{item[1]}\nFound:\n{output.strip()}")
            if not pr.is_finished():
                return CheckResult.wrong("Your program unnecessarily waiting for input.")
            return CheckResult.correct()


    if __name__ == '__main__':
        HonestCalc().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/208/stages/1042/implement#comment
status: Solved
record: 3
