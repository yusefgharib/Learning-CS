type: edu
files:
- name: game.py
  visible: true
  text: |+
    name1, name2 = "Jack", "John"
    num_pencils = int(input("How many pencils would you like to use?\n"))
    player = input("Who will be the first (John, Jack)\n")

    while num_pencils > 0:
        print(f"{player}'s turn:")
        print("|" * num_pencils)
        num_pencils -= int(input())
        if player == name1:
            player = name2
        else:
            player = name1

  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest import *
    import re


    class LastPencilTest(StageTest):
        @dynamic_test()
        def CheckOutput(self):
            main = TestedProgram()
            output = main.start().lower()
            lines = output.strip().split('\n')
            if len(lines) != 1 or "how many pencils" not in output:
                raise WrongAnswer("When the game just started, it should output only one line asking the user about amount "
                                  "of pencils he would like to use with \"How many pencils\" substring")

            output2 = main.execute("1")
            output2 = output2.replace(" ", "")
            pattern = re.compile(".*\([a-zA-Z_0-9]+,[a-zA-Z_0-9]+\)")
            if len(output2.split()) != 1:
                raise WrongAnswer("When the user replies with amount of pencils - game should print 1 non-empty line "
                                  "asking who will be the first player.\n"
                                  f"{len(output2.split())} lines were found in the output.")
            if not re.match(pattern, output2):
                raise WrongAnswer("When the user replies with number of pencils - game should ask who will"
                                  " be the first player ending with \"(\"Name\", \"Name2\")\" substring")
            return CheckResult.correct()

        data = ["a", "_", "test", "|", "|||||", " ", "-", "two", "10g", "k5", "-0.2", "0.3"]

        @dynamic_test(data=data)
        def CheckNumericAmount(self, inp):
            main = TestedProgram()
            main.start()

            output = main.execute(inp).lower()

            if ("number of pencils" not in output) or ("numeric" not in output):
                raise WrongAnswer("When the user provided number of pencils not as a numeric sequence - game should "
                                  "inform user that his input is incorrect and re-query the input"
                                  " with \"The number of pencils should be numeric\" substring")
            for i in range(1, 5):
                output = main.execute(inp).lower()
                if ("number of pencils" not in output) or ("numeric" not in output):
                    raise WrongAnswer("When the user provided number of pencils not as a numeric sequence "
                                      "after another wrong input - game should "
                                      "inform user that his input is incorrect and re-query the input"
                                      " with \"The number of pencils should be numeric\" substring")
            return CheckResult.correct()

        @dynamic_test()
        def CheckNotZeroAmount(self):
            main = TestedProgram()
            main.start()
            output = main.execute("0").lower()

            if ("number of pencils" not in output) or ("positive" not in output):
                raise WrongAnswer("When the user provided \"0\" as an number of pencils - game should "
                                  "inform user that his input is incorrect and re-query the input"
                                  " with \"The number of pencils should be positive\" substring")
            for i in range(1, 5):
                output = main.execute("0").lower()
                if ("number of pencils" not in output) or ("positive" not in output):
                    raise WrongAnswer("When the user provided \"0\" as an number of pencils "
                                      "after another wrong input - game should "
                                      "inform user that his input is incorrect and re-query the input"
                                      " with \"The number of pencils should be positive\" substring")
            return CheckResult.correct()

        @dynamic_test()
        def CheckBothAmount(self):
            main = TestedProgram()
            main.start()

            output = main.execute("0").lower()
            if ("number of pencils" not in output) or ("positive" not in output):
                raise WrongAnswer("When the user provided \"0\" as an number of pencils - game should "
                                  "inform user that his input is incorrect and re-query the input"
                                  " with \"The number of pencils should be positive\" substring")
            output = main.execute("a").lower()
            if ("number of pencils" not in output) or ("numeric" not in output):
                raise WrongAnswer("When the user provided number of pencils not as a numeric sequence "
                                  "after another wrong input - game should "
                                  "inform user that his input is incorrect and re-query the input"
                                  " with \"The number of pencils should be numeric\" substring")
            output = main.execute("0").lower()
            if ("number of pencils" not in output) or ("positive" not in output):
                raise WrongAnswer("When the user provided \"0\" as an number of pencils "
                                  "after another wrong input - game should "
                                  "inform user that his input is incorrect and re-query the input"
                                  " with \"The number of pencils should be positive\" substring")
            output2 = main.execute("1")
            output2 = output2.replace(" ", "")
            pattern = re.compile(".*\([a-zA-Z_0-9]+,[a-zA-Z_0-9]+\)")
            if not re.match(pattern, output2):
                raise WrongAnswer("When the user correctly replies with number of pencils after wrong input - "
                                  "game should ask who will"
                                  " be the first player ending with \"(\"Name\", \"Name2\")\" substring")
            return CheckResult.correct()

        test_data = [
            [5, 1, [2, 1], 2, ["4", "a", "0", "-1", "_", "|", "|||||"], 2],
            [20, 1, [3, 2, 3, 1, 2, 3, 3, 2], 1, ["4", "a", "0", "-1", "_", "|", "|||||"], 2],
            [30, 1, [3, 2, 3, 1, 2, 3, 3, 3, 2, 3, 3], 2, ["4", "a", "0", "-1", "_", "|", "|||||"], 1],
            [5, 2, [2, 1], 2, ["4", "a", "0", "-1", "_", "|", "|||||"], 1],
            [20, 2, [3, 2, 3, 1, 2, 3, 3, 2], 1, ["4", "a", "0", "-1", "_", "|", "|||||"], 1],
            [30, 2, [3, 2, 3, 1, 2, 3, 3, 3, 2, 3, 3], 2, ["4", "a", "0", "-1", "_", "|", "|||||"], 2],
        ]

        @dynamic_test(data=test_data)
        def CheckGame(self, amount, first, moves, last, incorrect, winner):
            main = TestedProgram()
            main.start()

            output = main.execute(str(amount))
            output = output.replace(" ", "")

            if "who" not in output.lower() or 'first' not in output.lower():
                raise WrongAnswer("The game should ask user to input the player that goes first.")

            leftName = output[output.rfind('(') + 1:output.rfind(',')]
            rightName = output[output.rfind(',') + 1:output.rfind(')')]

            prevPlayer = ""
            nextPlayer = ""
            if first == 1:
                prevPlayer = leftName
                nextPlayer = rightName
            else:
                prevPlayer = rightName
                nextPlayer = leftName

            output2 = main.execute(leftName+rightName).lower()

            if ("choose between" not in output2) or (leftName.lower() not in output2) or (rightName.lower() not in output2):
                raise WrongAnswer("When the user provided the string, as a first player, that is not equal to"
                                  f"'{leftName}' or '{rightName}' - game should "
                                  "inform user that his input is incorrect and re-query the input"
                                  f" with \"Choose between '{leftName}' and '{rightName}'\" substring")
            for i in range(1, 5):
                output2 = main.execute(leftName+rightName).lower()
                if ("choose between" not in output2) or (leftName.lower() not in output2) or (rightName.lower() not in output2):
                    raise WrongAnswer("When the user provided the string, as a first player, that is not equal to"
                                      f"'{leftName}' or '{rightName}' after another wrong input - game should "
                                      "inform user that his input is incorrect and re-query the input"
                                      f" with \"Choose between '{leftName}' and '{rightName}'\" substring")
            output3 = main.execute(prevPlayer).lower()

            lines = output3.strip().split('\n')
            linesNonEmpty = [s for s in lines if len(s) != 0]

            if len(linesNonEmpty) != 2:
                raise WrongAnswer("When the player provided the game initial conditions"
                                  ", there should be printed exactly 2 non-empty lines: "
                                  "one with the number of pencils, the other with the '*NameX*'s turn' string.\n"
                                  f"{len(linesNonEmpty)} non-empty lines were found in the output.")

            checkPencils = [s for s in lines if '|' in s]
            if len(checkPencils) == 0:
                raise WrongAnswer("When the player provided the game correct initial conditions"
                                  ", there should be printed pencils-line with '|' symbols")
            if len(checkPencils) > 1:
                raise WrongAnswer("When the player provided the game correct initial conditions"
                                  ", there should be exactly one line in output, that contains '|' symbols")
            if len(list(set(checkPencils[0]))) != 1:
                raise WrongAnswer("The pencils-lines should not contain any other symbols except the '|'")

            if len(checkPencils[0]) != int(amount):
                raise WrongAnswer("When the player provided the game correct initial conditions,"
                                  "the pencils-line should contain as much '|' symbols, as there are in initial conditions")

            checkTurn = any((prevPlayer.lower() in s) and ("turn" in s) for s in lines)

            if not checkTurn:
                raise WrongAnswer(f"When the player provided the game correct initial conditions"
                                  f" there should be a line in output containing \"{prevPlayer}\" and \"turn\""
                                  f" substrings if '{prevPlayer}' was chosen as the first player")

            onTable = amount

            for i in moves:
                for j in incorrect:
                    output = main.execute(j).lower()
                    if ("possible values" not in output) or ('1' not in output) or ('2' not in output) or ('3' not in output) :
                        raise WrongAnswer(f"If the player enters a string of how many pencils he took, that is not"
                                          f" '1', '2' or '3' - the game should "
                                          "inform user that his input is incorrect and re-query the input"
                                          f" with \"Possible values: '1', '2', '3'\" substring")
                onTable -= i
                output = main.execute(str(i)).lower()
                lines = output.strip().split('\n')
                linesNonEmpty = [s for s in lines if len(s) != 0]

                if len(linesNonEmpty) != 2:
                    raise WrongAnswer("When one of the players enters number of pencils, he wanted to remove"
                                      ", there should be printed exactly 2 non-empty lines")

                checkPencils = [s for s in lines if '|' in s]
                if len(checkPencils) == 0:
                    raise WrongAnswer("When one of the players enters number of pencils, he wanted to remove"
                                      ", there should be printed pencils-line with '|' symbols")
                if len(checkPencils) > 1:
                    raise WrongAnswer("When one of the players enters number of pencils, he wanted to remove"
                                      ", there should be exactly one line in output, that contains '|' symbols")
                if len(list(set(checkPencils[0]))) != 1:
                    raise WrongAnswer("The pencils-line should not contain any other symbols except the '|'")

                if len(checkPencils[0]) != onTable:
                    raise WrongAnswer("When one of the players enters number of pencils, he wanted to remove, "
                                      "the pencils-line should contain as much '|' symbols, as there are pencils left")

                checkTurn = any((nextPlayer.lower() in s) and ("turn" in s) for s in lines)

                if not checkTurn:
                    raise WrongAnswer(f"When {prevPlayer} enters number of pencils, he wanted to remove"
                                      f" there should be a line in output containing \"{nextPlayer}\" and \"turn\"")
                prevPlayer, nextPlayer = nextPlayer, prevPlayer

            output = main.execute(str(last+1)).lower()
            if ("too many" not in output) or ('pencils' not in output):
                raise WrongAnswer("If the player enters number of pencils that is greater than there are on the table"
                                  " - the game should inform user that his input is incorrect and re-query the input"
                                  " with \"too many pencils\" substring")

            output = main.execute(str(last)).lower()
            lines = output.strip().split('\n')
            linesNonEmpty = [s for s in lines if len(s) != 0]

            winnerName = ""

            if winner == 1:
                winnerName = leftName
            if winner == 2:
                winnerName = rightName

            if len(linesNonEmpty) != 1 or (winnerName.lower() not in linesNonEmpty[0]) or ('win' not in linesNonEmpty[0] and 'won' not in linesNonEmpty[0]):
                if winnerName.lower() not in linesNonEmpty[0] and ('win' in linesNonEmpty[0] or 'won' in linesNonEmpty[0]):
                    raise WrongAnswer("Make sure you determined the winner of the game correctly.\n"
                                      "The player who takes the last pencil loses the game.")
                raise WrongAnswer("When the last pencil was taken - there should be exactly one line in output, informing "
                                  "who was the winner in this game with \"*Name*\" and \"win\"/\"won\" substrings")

            if not main.is_finished():
                raise WrongAnswer("Your program should not request anything, when there are no pencils left")
            return CheckResult.correct()


    if __name__ == '__main__':
        LastPencilTest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/258/stages/1305/implement#comment
status: Solved
record: 3
