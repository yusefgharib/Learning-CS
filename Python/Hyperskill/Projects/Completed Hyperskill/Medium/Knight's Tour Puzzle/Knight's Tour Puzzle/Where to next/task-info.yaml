type: edu
custom_name: Where to next?
files:
- name: game.py
  visible: true
  text: |
    class Knight:
        def __init__(self):
            self.border = None
            self.placeholder = None
            self.legal_moves = [[-2, 1], [-2, -1], [-1, 2], [-1, -2], [1, 2], [1, -2], [2, 1], [2, -1]]
            self.cols, self.rows = None, None
            self.board = {}

        def check_positions(self, col, row):
            if col > self.cols or col <= 0:
                return False
            if row > self.rows or row <= 0:
                return False
            return True

        def get_start_pos(self):
            while True:
                start_pos = input('Enter the knight\'s starting position:')
                if len(start_pos.split()) == 2:
                    try:
                        start_col, start_row = map(int, start_pos.split())
                        if 0 < start_col <= self.cols and 0 < start_row <= self.rows:
                            break
                    except ValueError:
                        pass
                print('Invalid position!')
            self.board[start_row][start_col] = ' X'

        def setup_board(self):
            while True:
                dimensions = input('Enter your board dimensions:')
                if len(dimensions.split()) == 2:
                    try:
                        self.cols, self.rows = map(int, dimensions.split())
                        if self.cols > 0 and self.rows > 0:
                            break
                    except ValueError:
                        pass
                print('Invalid dimensions')
            self.placeholder = ('_' * len(str(self.cols * self.rows)))
            self.border = '-' * (len(f'| {self.placeholder * self.cols} |') + self.cols - 1)
            for i in range(self.rows, 0, -1):
                for j in range(1, self.cols + 1):
                    self.board[i] = {x: self.placeholder for x in range(1, self.cols + 1)}

        def print_board(self):
            c = int(self.rows) + 1
            print('', self.border)
            for row in self.board:
                c -= 1
                print(f'{c}| ', end='')
                for col in self.board[row]:
                    print(self.board[row][col], '', end='')
                print('|')
            print('', self.border)
            column_nums = ''
            for i in range(1, self.cols + 1):
                column_nums = column_nums + (' ' * len(str(self.cols * self.rows))) + str(i)
            print('  ' * (len(str(self.rows)) * 1), column_nums, sep='')


    k = Knight()
    k.setup_board()
    k.get_start_pos()
    k.print_board()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    # from hstest.stage_test import StageTest
    from hstest.stage_test import *
    from hstest.test_case import TestCase, SimpleTestCase
    from hstest.check_result import CheckResult
    from copy import deepcopy
    import random

    # constants
    DIRECTIONS = 8
    move_x = [2, 1, -1, -2, -2, -1, 1, 2]
    move_y = [1, 2, 2, 1, -1, -2, -2, -1]


    def digits(num):
        return len(str(num))


    def checkMove(board):
        movelist = []
        for i in range(DIRECTIONS):
            new_x = x_start + move_x[i]  # user coordinates 1 - n
            new_y = y_start + move_y[i]  # user coordinates 1 - n
            if new_x in range(1, ncols + 1) and new_y in range(1, nrows + 1):
                movelist.append([new_x, new_y])
        for i in range(ncols):
            for j in range(nrows):
                if [i + 1, j + 1] in movelist:
                    try:
                        if board[j][i] not in ["o", "O", "0"]:
                            return False, CheckResult.wrong("Marker missing from possible move")
                    except IndexError:
                        return False, CheckResult.wrong("The board is not set up correctly")
                elif i + 1 == x_start and j + 1 == y_start:
                    if board[j][i] not in ["x", "X"]:
                        return False, CheckResult.wrong("Incorrect starting position or marker")
                else:
                    try:
                        if "_" not in board[j][i]:
                            return False, CheckResult.wrong("Markers placed in wrong location")
                    except IndexError:
                        return False, CheckResult.wrong("The board is not set up correctly")
        return True, CheckResult.correct()


    random.seed()
    ncols = random.randint(3, 8)
    nrows = random.randint(3, 8)

    yaxiswidth = digits(nrows)
    xaxiswidth = digits(nrows * ncols)
    size = str(ncols) + " " + str(nrows)
    x_start = random.randint(3, ncols)
    y_start = random.randint(3, nrows)
    start = str(x_start) + " " + str(y_start)


    class KnightsTourTest(StageTest):
        def generate(self) -> List[TestCase]:
            return [TestCase(stdin=[self.check_request_size, self.check_request_start]),
                    TestCase(stdin=["-1 10", size, start], check_function=self.check_bounds),
                    TestCase(stdin=["1", size, start], check_function=self.check_length),
                    TestCase(stdin=["a 10", size, start], check_function=self.check_num),
                    TestCase(stdin=[size, "0 0", start], check_function=self.check_bounds),
                    TestCase(stdin=[size, "1", start], check_function=self.check_length),
                    TestCase(stdin=[size, "a 1", start], check_function=self.check_num),
                    TestCase(stdin=[size, "-1 " + str(y_start), start], check_function=self.check_bounds),
                    TestCase(stdin=[size, str(ncols + 1) + " " + str(nrows + 1), start], check_function=self.check_bounds),
                    TestCase(stdin=[size, start]), ]

        def check_request_size(self, output):
            output = output.lower()
            if "dimension" not in output:
                return CheckResult.wrong("Your program should ask for the board dimensions")
            return size

        def check_request_start(self, output):
            output = output.lower()
            if "position" not in output:
                return CheckResult.wrong("Your program should ask for the knight's starting position")
            return start

        def check_bounds(self, reply: str, attach: Any) -> CheckResult:
            if "invalid" not in reply.lower():
                return CheckResult.wrong("Your program should check if the board size and position are within bounds")
            return CheckResult.correct()

        def check_length(self, reply: str, attach: Any) -> CheckResult:
            if "invalid" not in reply.lower():
                return CheckResult.wrong("Your program should check if there are the right number of inputs")
            return CheckResult.correct()

        def check_num(self, reply: str, attach: Any) -> CheckResult:
            if "invalid" not in reply.lower():
                return CheckResult.wrong("Your program should only accept integer inputs")
            return CheckResult.correct()

        def check(self, reply: str, attach: Any) -> CheckResult:
            # check output
            try:
                if reply == "":
                    return CheckResult.wrong("Output was empty")
                border = "-" * (ncols * (xaxiswidth + 1) + 3) + "\n"
                if border not in reply:
                    return CheckResult.wrong(f"The board borders aren't found.\n"
                                             f"For a board of {ncols} columns and cell width {xaxiswidth}, \n"
                                             f"the following line should be printed as a border:\n"
                                             f"{border}\n"
                                             f"That is, a line of length {len(border)}.")
                reply = reply.split(border)
                if len(reply) != 3:
                    return CheckResult.wrong("Incorrect border or spacing. \n"
                                             "There should be 2 identical borders for a board.\n"
                                             f"For a board of {ncols} columns and cell width {xaxiswidth}, \n"
                                             f"the following line should be printed as a border:\n"
                                             f"{border}\n"
                                             f"That is, a line of length {len(border)}.")
            except:
                return CheckResult.wrong("Incorrect output")

            # extract board and xlabels
            try:
                board = reply[1].replace(' | \n', ' |\n')
                board = board.split(" |\n")[0:nrows]
                if len(board) != nrows:
                    return CheckResult.wrong("Incorrect side borders or format")

                xaxis1 = deepcopy(reply[2])
                xaxis1 = xaxis1.strip().split()
                xaxis2 = deepcopy(reply[2])
                if len(xaxis1) != ncols:
                    return CheckResult.wrong("Incorrect column numbers")
            except IndexError:
                return CheckResult.wrong("Incorrect border or spacing")

            # check location of xcol = 1 for alignment
            try:
                x_one_pos = yaxiswidth + 1 + 1 + xaxiswidth
                if xaxis2[x_one_pos - 1] != "1":
                    return CheckResult.wrong("Incorrect column number alignment or placeholder width")
                xaxis2 = xaxis2.strip()
                # check rest of column numbers for alignment
                for n in range(1, ncols):
                    xaxis2 = xaxis2.split(" " * (xaxiswidth - digits(n + 1) + 1), 1)
                    if len(xaxis2) != 2:
                        return CheckResult.wrong("Spacing between column numbers is incorrect")
                    if str(n) != xaxis2[0]:
                        return CheckResult.wrong("Incorrect column number alignment or placeholder width")
                    xaxis2 = xaxis2[1]
                if str(ncols) != xaxis2:
                    return CheckResult.wrong("Incorrect column number alignment or placeholder width")
            except:
                return CheckResult.wrong("There is something wrong with your column numbers")

            board2 = []
            # iterate through rows to check
            for n, row in enumerate(board):
                rownum = nrows - n
                colnum = n + 1

                # check column numbers
                if colnum > ncols:
                    pass
                elif colnum != int(xaxis1[n]):
                    return CheckResult.wrong("Incorrect column numbers")

                # split at left border, check if row split correctly
                row = row.split("|")
                if len(row) != 2:
                    return CheckResult.wrong("Incorrect side borders or format")

                if len(row[0].strip()) != yaxiswidth:
                    return CheckResult.wrong("Row numbers or side border not aligned")

                board2.append(row[1].split())

                # check if knight in correct position
                if rownum == y_start:

                    # check row number
                    if rownum != int(row[0]):
                        return CheckResult.wrong("Incorrect row numbers")

                    # extract each position, including placeholders and knight
                    row = row[1].strip().split()

                    #   check if number of columns is correct
                    if len(row) != ncols:
                        return CheckResult.wrong("Incorrect board dimension")

                    # check correct position
                    if row[x_start - 1] not in ['x', 'X']:
                        return CheckResult.wrong("Incorrect starting position or marker")

                    # check this row if placeholders are correct
                    for place in row:
                        if place not in ['x', 'X']:
                            if place != '_' * xaxiswidth:
                                return CheckResult.wrong("Incorrect placeholder width or marker")

            # check possible moves
            # print(*board2, sep="\n")
            board2 = board2[::-1]
            # print(board2)
            valid_board, message = checkMove(board2)
            if valid_board:
                pass
            else:
                return message

            return CheckResult.correct()


    if __name__ == '__main__':
        KnightsTourTest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/141/stages/748/implement#comment
status: Solved
record: 2
