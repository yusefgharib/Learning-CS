type: edu
files:
- name: bacteria.py
  visible: true
  text: |
    from itertools import zip_longest
    c_seperator, c_c_seperator, complement, complements, strand = '', '', '', {'T':'A','A':'T','C':'G','G':'C'}, input()
    seperator, comp_sep = input().split()
    for char1, char2, char3 in zip_longest(strand, seperator, comp_sep):
        for key in complements:
            complement += complements[key] if char1 == key else ''
            c_seperator += complements[key] if char2 == key else ''
            c_c_seperator += complements[key] if char3 == key else ''
    print(strand[strand.find(seperator) + 1: strand.find(comp_sep) + 1],
          complement[complement.find(c_seperator) + 5: complement.find(c_c_seperator) + 5], sep='\n')
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from hstest import *

    CORRECT = """GACGTCTGTGCAAGTACTACTGTTCTGCAGGTCGACTCTAGAGGATCCCCGGGTACCTAGAATTAAAGAGGAGAAATTAAGCATGCGTAAAGGAGAAGAACTTTTCACTGGAGTTGTCCCAATTCTTGTTGAATTAGATGGTGATGTTAATGGGCACAAATTTCTGTCAGTGGAGAGGGTGAAGGTGATGCAACATACGGAAAACTTACCCTTAAATTTATTTGCACTACTGGAAAACTACCTGTTCCATGGCCAACACTTGTCACTACTTTCGGTTATGGTGTTCAATGCTTTGCGAGATACCCAGATCATATGAAACAGCATGACTTTTTCAAGAGTGCCATGCCCGAAGGTTATGTACAGGAAAGAACTATATTTTTCAAAGATGACGGGAACTACAAGACACGTGCTGAAGTCAAGTTTGAAGGTGATACCCTTGTTAATAGAATCGAGTTAAAAGGTATTGATTTTAAAGAAGATGGAAACATTCTTGGACACAAATTGGAATACAACTATAACTCACACAATGTATACATCATGGCAGACAAACAAAAGAATGGAATCAAAGTTAACTTCAAAATTAGACACAACATTGAAGATGGAAGCGTTCAACTAGCAGACCATTATCAACAAAATACTCCAATTGGCGATGGCCCTGTCCTTTTACCAGACAACCATTACCTGTCCACACAATCTGCCCTTTCGAAAGATCCCAACGAAAAGAGAGACCACATGGTCCTTCTTGAGTTTGTAACAGCTGCTGGGATTACACATGGCATGGATGAACTATACAAAAGGCCTGCAGCAAACGACGAAAACTACGCTTTAGTAGCTTAATAAGCTTAATTAGCTGACCTACTAGTCGGCCGTCTCGACATGAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCAATGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCAGTCACTTGAATTCGATACCCAGCTGTTATTTGTATAGTTCA
    CTGCAGACACGTTCATGATGACAAGACGTCCAGCTGAGATCTCCTAGGGGCCCATGGATCTTAATTTCTCCTCTTTAATTCGTACGCATTTCCTCTTCTTGAAAAGTGACCTCAACAGGGTTAAGAACAACTTAATCTACCACTACAATTACCCGTGTTTAAAGACAGTCACCTCTCCCACTTCCACTACGTTGTATGCCTTTTGAATGGGAATTTAAATAAACGTGATGACCTTTTGATGGACAAGGTACCGGTTGTGAACAGTGATGAAAGCCAATACCACAAGTTACGAAACGCTCTATGGGTCTAGTATACTTTGTCGTACTGAAAAAGTTCTCACGGTACGGGCTTCCAATACATGTCCTTTCTTGATATAAAAAGTTTCTACTGCCCTTGATGTTCTGTGCACGACTTCAGTTCAAACTTCCACTATGGGAACAATTATCTTAGCTCAATTTTCCATAACTAAAATTTCTTCTACCTTTGTAAGAACCTGTGTTTAACCTTATGTTGATATTGAGTGTGTTACATATGTAGTACCGTCTGTTTGTTTTCTTACCTTAGTTTCAATTGAAGTTTTAATCTGTGTTGTAACTTCTACCTTCGCAAGTTGATCGTCTGGTAATAGTTGTTTTATGAGGTTAACCGCTACCGGGACAGGAAAATGGTCTGTTGGTAATGGACAGGTGTGTTAGACGGGAAAGCTTTCTAGGGTTGCTTTTCTCTCTGGTGTACCAGGAAGAACTCAAACATTGTCGACGACCCTAATGTGTACCGTACCTACTTGATATGTTTTCCGGACGTCGTTTGCTGCTTTTGATGCGAAATCATCGAATTATTCGAATTAATCGACTGGATGATCAGCCGGCAGAGCTGTACTTGCGTCCTTTCTTGTACACTCGTTTTCCGGTCGTTTTCCGGTCCTTGGCATTTTTCCGGCGCAACGACCGCAAAAAGGTATCCGAGGCGGGGGGACTGCTCGTAGTGTTTTTAGCTGCGAGTTCAGTCTCCACCGCTTTGGGCTGTCCTGATATTTCTATGGTCCGCAAAGGGGGACCTTCGAGGGAGCACGCGAGAGGACAAGGCTGGGACGGCGAATGGCCTATGGACAGGCGGAAAGAGGGAAGCCCTTCGCACCGCGAAAGAGTTACGAGTGCGACATCCATAGAGTCAAGCCACATCCAGCAAGCGAGGTTCGACCCGACACACGTCAGTGAACTTAAGCTATGGGTCGACAATAAACATATCAAGT"""


    class LigationTest(StageTest):
        test_files = {"input1.txt": "ATCGTTCGTGTGCATGT TGCATCTGTATCTAGCGC TAGCAAGCACACGTACAACGT AGACATAGATCGCG\nTGCAXXXXXXXXXXXXX XXXXXXXXXXXXXACGT",
                      "input2.txt": "GACGTCTGTGCAAGTACTACTGTTC TGCAGTCACTTGAATTCGATACCCAGCTGTTATTTGTATAGTTCA CTGCAGACACGTTCATGATGACAAGACGT CAGTGAACTTAAGCTATGGGTCGACAATAAACATATCAAGT\nTGCAGGTCGACTCTAGAGGATCCCCGGGTACCTAGAATTAAAGAGGAGAAATTAAGCATGCGTAAAGGAGAAGAACTTTTCACTGGAGTTGTCCCAATTCTTGTTGAATTAGATGGTGATGTTAATGGGCACAAATTTCTGTCAGTGGAGAGGGTGAAGGTGATGCAACATACGGAAAACTTACCCTTAAATTTATTTGCACTACTGGAAAACTACCTGTTCCATGGCCAACACTTGTCACTACTTTCGGTTATGGTGTTCAATGCTTTGCGAGATACCCAGATCATATGAAACAGCATGACTTTTTCAAGAGTGCCATGCCCGAAGGTTATGTACAGGAAAGAACTATATTTTTCAAAGATGACGGGAACTACAAGACACGTGCTGAAGTCAAGTTTGAAGGTGATACCCTTGTTAATAGAATCGAGTTAAAAGGTATTGATTTTAAAGAAGATGGAAACATTCTTGGACACAAATTGGAATACAACTATAACTCACACAATGTATACATCATGGCAGACAAACAAAAGAATGGAATCAAAGTTAACTTCAAAATTAGACACAACATTGAAGATGGAAGCGTTCAACTAGCAGACCATTATCAACAAAATACTCCAATTGGCGATGGCCCTGTCCTTTTACCAGACAACCATTACCTGTCCACACAATCTGCCCTTTCGAAAGATCCCAACGAAAAGAGAGACCACATGGTCCTTCTTGAGTTTGTAACAGCTGCTGGGATTACACATGGCATGGATGAACTATACAAAAGGCCTGCAGCAAACGACGAAAACTACGCTTTAGTAGCTTAATAAGCTTAATTAGCTGACCTACTAGTCGGCCGTCTCGACATGAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCAATGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTG CCAGCTGAGATCTCCTAGGGGCCCATGGATCTTAATTTCTCCTCTTTAATTCGTACGCATTTCCTCTTCTTGAAAAGTGACCTCAACAGGGTTAAGAACAACTTAATCTACCACTACAATTACCCGTGTTTAAAGACAGTCACCTCTCCCACTTCCACTACGTTGTATGCCTTTTGAATGGGAATTTAAATAAACGTGATGACCTTTTGATGGACAAGGTACCGGTTGTGAACAGTGATGAAAGCCAATACCACAAGTTACGAAACGCTCTATGGGTCTAGTATACTTTGTCGTACTGAAAAAGTTCTCACGGTACGGGCTTCCAATACATGTCCTTTCTTGATATAAAAAGTTTCTACTGCCCTTGATGTTCTGTGCACGACTTCAGTTCAAACTTCCACTATGGGAACAATTATCTTAGCTCAATTTTCCATAACTAAAATTTCTTCTACCTTTGTAAGAACCTGTGTTTAACCTTATGTTGATATTGAGTGTGTTACATATGTAGTACCGTCTGTTTGTTTTCTTACCTTAGTTTCAATTGAAGTTTTAATCTGTGTTGTAACTTCTACCTTCGCAAGTTGATCGTCTGGTAATAGTTGTTTTATGAGGTTAACCGCTACCGGGACAGGAAAATGGTCTGTTGGTAATGGACAGGTGTGTTAGACGGGAAAGCTTTCTAGGGTTGCTTTTCTCTCTGGTGTACCAGGAAGAACTCAAACATTGTCGACGACCCTAATGTGTACCGTACCTACTTGATATGTTTTCCGGACGTCGTTTGCTGCTTTTGATGCGAAATCATCGAATTATTCGAATTAATCGACTGGATGATCAGCCGGCAGAGCTGTACTTGCGTCCTTTCTTGTACACTCGTTTTCCGGTCGTTTTCCGGTCCTTGGCATTTTTCCGGCGCAACGACCGCAAAAAGGTATCCGAGGCGGGGGGACTGCTCGTAGTGTTTTTAGCTGCGAGTTCAGTCTCCACCGCTTTGGGCTGTCCTGATATTTCTATGGTCCGCAAAGGGGGACCTTCGAGGGAGCACGCGAGAGGACAAGGCTGGGACGGCGAATGGCCTATGGACAGGCGGAAAGAGGGAAGCCCTTCGCACCGCGAAAGAGTTACGAGTGCGACATCCATAGAGTCAAGCCACATCCAGCAAGCGAGGTTCGACCCGACACACGT"}

        def common_test(self, input_file, correct_original, correct_complement):
            program = TestedProgram()
            program.start()

            if not program.is_waiting_input():
                raise WrongAnswer("You program should input the string")

            reply = program.execute(input_file)

            reply_list = reply.strip().split()
            if len(reply_list) != 2:
                raise WrongAnswer(f"There should be both strands: original and complementary separated by a newline character.\n"
                                  f"Therefore, the output should consist of 2 lines, found {len(reply_list)}")
            else:
                original_strand = reply_list[0]
                complement_strand = reply_list[1]
                if " " in original_strand or " " in complement_strand:
                    raise WrongAnswer("There should be no gaps in the strands")
                elif len(original_strand) != len(correct_original):
                    raise WrongAnswer("Check the length of the original strand.")
                elif len(complement_strand) != len(correct_complement):
                    raise WrongAnswer("Check the length of the complementary strand.")
                elif original_strand[0:5] != correct_original[0:5]:
                    raise WrongAnswer(f"The original strand should begin with {correct_original[0:5]}")
                elif original_strand[-5:] != correct_original[-5:]:
                    raise WrongAnswer(f"The original strand should end with {correct_original[-5:]}")
                elif complement_strand[0:5] != correct_complement[0:5]:
                    raise WrongAnswer(f"The complementary strand should begin with {correct_complement[0:5]}")
                elif complement_strand[-5:] != correct_complement[-5:]:
                    raise WrongAnswer(f"The complementary strand should end with {correct_complement[-5:]}")
                elif original_strand != correct_original:
                    raise WrongAnswer(f"Original plasmid is wrong.\n"
                                      f"Check if you performs the ligation correctly")
                elif complement_strand != correct_complement:
                    raise WrongAnswer(f"Complimentary plasmid is wrong.\n"
                                      f"Check if you performs the ligation correctly")
                else:
                    return CheckResult.correct()

        @dynamic_test(files=test_files)
        def test1(self):
            return self.common_test("input1.txt",
                                    "ATCGTTCGTGTGCATGTTGCAXXXXXXXXXXXXXTGCATCTGTATCTAGCGC",
                                    "TAGCAAGCACACGTACAACGTXXXXXXXXXXXXXACGTAGACATAGATCGCG")

        @dynamic_test(files=test_files)
        def test2(self):
            return self.common_test("input2.txt", CORRECT.split()[0], CORRECT.split()[1])


    if __name__ == "__main__":
        LigationTest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/209/stages/1048/implement#comment
status: Solved
record: 4
