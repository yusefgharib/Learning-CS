type: edu
custom_name: Create & Deploy
files:
- name: duskers/duskers.py
  visible: true
  text: "class Duskers:\n    def __init__(self):\n        self.valid_choices = [\"\
    play\", \"high\", \"help\", \"exit\", \"back\"]\n        self.main_choice = ''\n\
    \        self.title = r\"\"\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \n ____  _____ _____ _____ _____ _____ _____ \n|    \\|  |  |   __|  |  |   __|\
    \ __  |   __|\n|  |  |  |  |__   |    -|   __|    -|__   |\n|____/|_____|_____|__|__|_____|__|__|_____|\n\
    \n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"\"\"\n\n    def\
    \ title_menu(self):\n        print(self.title)\n\n    def menu(self):\n      \
    \  self.title_menu()\n        self.process_choice()\n\n    @staticmethod\n   \
    \ def exit_game():\n        print(\"Goodbye loser!\")\n        exit()\n\n    def\
    \ process_choice(self):\n        main_choice = input(\"[Play]\\n[High] Scores\\\
    n[Help]\\n[Exit]\").lower()\n        while main_choice not in self.valid_choices:\n\
    \            print(\"Invalid input\")\n            main_choice = input(\"[Play]\\\
    n[High] Scores\\n[Help]\\n[Exit]\").lower()\n        if main_choice == 'exit':\n\
    \            self.exit_game()\n        elif main_choice == 'play':\n         \
    \   self.play()\n        elif main_choice == 'help':\n            self.help()\n\
    \        elif main_choice == 'high':\n            self.scores()\n\n    def play(self):\n\
    \        name = input(\"Enter your name:\")\n        ready = input(f\"{name},\
    \ are you ready to begin?\\n[Yes] [No] Return to Main[Menu]\").lower()\n     \
    \   while ready not in ['yes', 'menu']:\n            print(\"Invalid input\")\n\
    \            ready = input(f\"{name}, are you ready to begin?\\n[Yes] [No] Return\
    \ to Main[Menu]\").lower()\n        if ready == 'menu':\n            self.menu()\n\
    \        elif ready == 'yes':\n            print(\"\"\"------------(LOG)-----------------------------(LOG)-----------------------------\n\
    |================================================================================|\n\
    |--------------------------------------------------------------------------------|\n\
    |--------------------------------------------------------------------------------|\n\
    |--------------------------------------------------------------------------------|\n\
    |--------------------------------------------------------------------------------|\n\
    |--------------------------------------------------------------------------------|\n\
    |--------------------------------------------------------------------------------|\n\
    |--------------------------------------------------------------------------------|\n\
    |================================================================================|\n\
    |                  [Ex]plore                          [Up]grade              \
    \    |\n|                  [Save]                             [M]enu         \
    \            |\n|================================================================================|\"\
    \"\")\n\n    def scores(self):\n        print(\"No scores to display.\")\n   \
    \     choice = input(\"[Back]\").lower()\n        while choice != 'back':\n  \
    \          print(\"Invalid input\")\n            choice = input(\"[Back]\").lower()\n\
    \n        self.menu()\n\n    @staticmethod\n    def help():\n        print(\"\
    Coming SOON! Thanks for playing!\")\n\n\nd = Duskers()\nd.menu()\n"
  learner_created: false
- name: tests.py
  visible: false
  text: |+
    from hstest import CheckResult, StageTest, TestedProgram, dynamic_test
    from utils.global_tests import GlobalDuskersTest

    MODULE_NAME = 'duskers.duskers'
    STAGE_NO = 3


    class DuskersTest(StageTest):

        @dynamic_test(data=["ex", "save", "up"])
        def test_placeholders_hub(self, option):
            pr = TestedProgram()
            pr.start()
            pr.execute("play")
            pr.execute("hyperskill")
            pr.execute("yes")

            short_message = pr.execute(option)
            if not short_message:
                return CheckResult.wrong(
                    "No placeholder text displayed to the user upon selecting a "
                    f"menu option that has not yet been implemented: [{option}]."
                )

            if not pr.is_finished():
                return CheckResult.wrong(
                    "Your program should terminate upon selecting a non-implemented "
                    f"option: [{option}]."
                )

            return CheckResult.correct()


    if __name__ == '__main__':
        # run tests that are shared among more than 1 stage
        return_code = GlobalDuskersTest(STAGE_NO, MODULE_NAME).run_tests()[0]
        # run tests specific to this stage if global tests pass
        if return_code == 0:
            DuskersTest(MODULE_NAME).run_tests()

  learner_created: false
feedback_link: https://hyperskill.org/projects/136/stages/726/implement#comment
status: Solved
record: 2
